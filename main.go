package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/url"
	"strconv"
	"strings"

	_ "github.com/mattn/go-sqlite3"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var welcomeText = `
–ü—Ä–∏–≤–µ—Ç! 
–í–æ–∑–Ω–∏–∫–ª–∞ –∏–¥–µ—è –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–ª–∞–π–∫–æ–≤ –≤ Linkedin —Å —Ü–µ–ª—å—é –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–æ–ª–ª–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–µ–ª–æ–∫–∞—Ü–∏–µ–π. –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –ª–∞–π–∫–æ–≤ –∑–Ω–∞—á–∏—Ç–µ–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à –ø–æ—Å—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ –æ–∫–∞–∂–µ—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—ã—á–Ω–æ –±—ã–≤–∞—é—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä—ã. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º—ã —Å–º–æ–∂–µ–º –ø–æ–º–æ—á—å –¥—Ä—É–≥-–¥—Ä—É–≥—É –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤ —ç—Ç–æ–º –ø–æ—É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:

1. –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ linkedin –ø–æ—Å—Ç –æ —Ç–æ–º, —á—Ç–æ –≤—ã –∏—â–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Ä–µ–ª–æ–∫–∞—Ü–∏–µ–π (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º) –∏ –ø–æ–º–µ—Ç–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã

2. –ú—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø—Ä–æ–ª–∞–π–∫–∞—Ç—å –ø–æ—Å—Ç—ã –≤–∞—à–∏—Ö –∫–æ–ª–ª–µ–≥ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –æ—Ö–≤–∞—Ç. –õ–∞–π–∫–∞—Ç—å/–¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ –Ω–µ—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ%s

3. –ó–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–æ—á–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É" –∏ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∏–∑ –ø—É–Ω–∫—Ç–∞ 1. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω –Ω–∞—á–Ω–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –±–ª–æ–∫–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–ª–µ—à–º–æ–±–∞

–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã –µ–µ —Å–º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –≤—ã–¥–∞—á–∏. –î–ª—è —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏—Ç–µ /start - –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

–¢–∞–∫ –∂–µ –±—ã–ª–æ –±—ã –∫—Ä—É—Ç–æ, –µ—Å–ª–∏ –±—ã –≤—ã –¥–æ–±–∞–≤–∏–ª–∏—Å—å –≤ –Ω–∞—à —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è - –±—É–¥–µ–º –¥–µ—Ä–∂–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ! (–∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç –≤–Ω–∏–∑—É)
–î—Ä—É–∑—å—è, –¥–∞–≤–∞–π—Ç–µ –ø–æ–º–æ–∂–µ–º –¥—Ä—É–≥-–¥—Ä—É–≥—É –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –≤ —ç—Ç–æ –Ω–µ–ª–µ–≥–∫–æ–µ –≤—Ä–µ–º—è! –í—Å–µ–º –º–∏—Ä.‚ù§Ô∏è

üö® DISCLAIMER: –µ—Å—Ç—å –∏–Ω—Ñ–∞, —á—Ç–æ Linkedin –±–æ—Ä–µ—Ç—Å—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π, –ø–æ—ç—Ç–æ–º—É –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ 10 (–ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ). –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ª–∞–π–∫–∏ –∏ –∫–æ–Ω–Ω–µ–∫—Ç—ã –¥–µ–ª–∞—é—Ç—Å—è —Ä—É—á–∫–∞–º–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É (–∫–∞–∫ –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è) –≤—Ä—è–¥ –ª–∏ –ø–æ—Å–ª–µ–¥—É—é—Ç —Å–∞–Ω–∫—Ü–∏–∏ –∑–∞ –≤–∑–∞–∏–º–æ–ª–∞–π–∫.`

var links = map[string]string{}

func InsertLink(db *sql.DB, userID, link string) error {
	_, err := db.Exec("INSERT INTO links (userID, link) VALUES (?, ?)", userID, link)
	return err
}

func GetLinkByUser(db *sql.DB, userID string) (*string, error) {
	row := db.QueryRow("SELECT link FROM links WHERE userID = ?", userID)

	var res string
	if err := row.Scan(&res); err != nil {
		return nil, err
	}
	return &res, nil
}

func UpdateLinkByUser(db *sql.DB, userID, newLink string) error {
	_, err := db.Exec("UPDATE links SET link = ? WHERE userID = ?", newLink, userID)
	return err
}

func DeleteLinkByUser(db *sql.DB, userID string) error {
	_, err := db.Exec("DELETE FROM links WHERE userID = ?", userID)
	return err
}

func GetLinkCount(db *sql.DB) (int64, error) {
	row := db.QueryRow("SELECT COUNT() FROM links")

	var res int64
	if err := row.Scan(&res); err != nil {
		return 0, err
	}
	return res, nil
}

func ListAllLinks(db *sql.DB) (map[string]string, error) {
	rows, err := db.Query("SELECT userID, link FROM links")
	if err != nil {
		return nil, err
	}

	m := make(map[string]string)

	var userID, link string
	for rows.Next() {
		rows.Scan(&userID, &link)
		m[userID] = link
	}

	return m, nil
}

func main() {
	bot, err := tgbotapi.NewBotAPI("token")
	if err != nil {
		log.Fatalf("unable to initialize tg client: %v", err)
	}
	db, err := sql.Open("sqlite3", "store.db")
	if err != nil {
		log.Fatalf("unable to open db conn: %v", err)
	}
	db.Exec(`CREATE TABLE links(
		id INTEGER PRIMARY KEY AUTOINCREMENT, 
		userID TEXT,
		link TEXT
	  );`)

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.CallbackQuery != nil {
			if update.CallbackQuery.Data == "addLink" {
				userID := strconv.FormatInt(update.CallbackQuery.From.ID, 10)
				msg := tgbotapi.NewMessage(update.CallbackQuery.From.ID, "–í–≤–µ–¥–∏—Ç–µ —É—Ä–ª –Ω–∞ –≤–∞—à –ø–æ—Å—Ç —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç—ã:")
				if err := InsertLink(db, userID, "0"); err != nil {
					log.Printf("unable to insert link: %v", err)
					continue
				}
				bot.Send(msg)
				continue
			}
			if update.CallbackQuery.Data == "deleteLink" {
				userID := strconv.FormatInt(update.CallbackQuery.From.ID, 10)
				if err := DeleteLinkByUser(db, userID); err != nil {
					log.Printf("unable to delete link: %v", err)
					continue
				}
				msg := tgbotapi.NewMessage(update.CallbackQuery.From.ID, "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
				bot.Send(msg)
				continue
			}
		}
		if update.Message != nil { // If we got a message
			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

			userID := strconv.FormatInt(update.Message.Chat.ID, 10)

			link, err := GetLinkByUser(db, userID)
			if err != nil && err != sql.ErrNoRows {
				log.Printf("unable to get link: %v", err)
				continue
			}
			if link != nil && *link != "0" {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ—é —Å—Å—ã–ª–∫—É")
				keyboard := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å –≤–∞—à—É —Å—Å—ã–ª–∫—É", "deleteLink"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonURL("–ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è", "https://t.me/+oSNQjFXdNndlYzE6"),
					),
				)
				msg.DisableWebPagePreview = true
				msg.ReplyMarkup = keyboard
				bot.Send(msg)
				continue
			}

			if link != nil && *link == "0" && !update.Message.IsCommand() {
				urlLink, err := url.Parse(update.Message.Text)
				if err != nil || !strings.Contains(urlLink.Host, "linkedin") {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
					bot.Send(msg)
					continue
				}
				if err := UpdateLinkByUser(db, userID, update.Message.Text); err != nil {
					log.Printf("unable to update link: %v", err)
					continue
				}
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ!")
				bot.Send(msg)
				continue
			}

			if update.Message.Command() == "start" {
				var linkText string

				var i int
				links, err := ListAllLinks(db)
				if err != nil {
					log.Printf("unable to list links: %v", err)
					continue
				}
				for _, link := range links {
					if i >= 10 {
						break
					}
					if link == "0" {
						continue
					}
					i++
					linkText += fmt.Sprintf("\n - %s", link)
				}
				if len(links) == 0 {
					linkText = "–ü–æ–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç!"
				}

				msgText := fmt.Sprintf(welcomeText, linkText)
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)

				keyboard := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", "addLink"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonURL("–ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è", "https://t.me/+oSNQjFXdNndlYzE6"),
					),
				)
				msg.ReplyMarkup = keyboard
				msg.DisableWebPagePreview = true

				bot.Send(msg)
			}

		}
	}
}
